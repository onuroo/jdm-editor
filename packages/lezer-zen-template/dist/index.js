import { LRParser } from '@lezer/lr';
import { styleTags, tags } from '@lezer/highlight';

const zenHighlight = styleTags({
  'Text': tags.content,
  'ExpressionOpen ExpressionClose': tags.special(tags.brace),
});

// This file was generated by lezer-generator. You probably shouldn't edit it.
const parser = LRParser.deserialize({
  version: 14,
  states: "!dOQOPOOOOOO'#C_'#C_OYOPO'#C^OOOO'#Cb'#CbOOOO'#Cc'#CcQQOPOOOOOO'#C`'#C`O_OPO,58xOOOO-E6a-E6aOOOO'#Ca'#CaOOOO1G.d1G.d",
  stateData: "i~OXPOYRO~OYUO~OZXO~OXZYZ~",
  goto: "mWPPX]adXgTSOTTQOTRVQRYVQTORWT",
  nodeNames: "âš  Template Expression ExpressionOpen ExpressionInner ExpressionClose Text",
  maxTerm: 11,
  nodeProps: [
    ["closedBy", 3,"ExpressionClose"],
    ["openedBy", 5,"ExpressionOpen"]
  ],
  propSources: [zenHighlight],
  skippedNodes: [0],
  repeatNodeCount: 1,
  tokenData: "!j~RVO#oh#o#p!S#p#qh#q#r!_#r;'Sh;'S;=`|<%lOh~mTY~O#oh#p#qh#r;'Sh;'S;=`|<%lOh~!PP;=`<%lh~!VP#o#p!Y~!_OX~~!bP#q#r!e~!jOZ~",
  tokenizers: [0],
  topRules: {"Template":[0,1]},
  tokenPrec: 20
});

export { parser };
